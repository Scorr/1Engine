#ifndef DEFERRED_PASS_SHADE_COMMON_P_GLSLI_
#define DEFERRED_PASS_SHADE_COMMON_P_GLSLI_

#include "../deferred_surface.glsli"
#include "../cbuffers.glsli"

// Common samplers
layout(binding = 0, location = 20) uniform sampler2D textureSampler0;	// Diffuse
layout(binding = 1, location = 21) uniform usampler2D textureSampler1;	// Normals
layout(binding = 2, location = 22) uniform sampler2D textureSampler2;	// Lighting Properties
layout(binding = 3, location = 23) uniform sampler2D textureSampler3;	// Glow (for now)
layout(binding = 4, location = 24) uniform sampler2D textureSampler4;	// Depth

float DecodeNormalComponent ( uint normal_int )
{
	return (normal_int - 32767.5) / 32767.5;
}

void DecodeSurfaceInfo ( out rrSurfaceInfo surface, in rrGBufferValues gbuffer, in vec2 uv0 )
{
	surface.albedo = gbuffer.buffer0.rgba;
	surface.normal = vec3(
		DecodeNormalComponent(gbuffer.buffer1.x >> 16),
		DecodeNormalComponent(gbuffer.buffer1.x & 0xFFFF),
		DecodeNormalComponent(gbuffer.buffer1.y >> 16));
	surface.shade_model = int(gbuffer.buffer1.y & 0xF);
	surface.is_frontface = ((gbuffer.buffer1.y & 0x10) == 0) ? false : true;
		
	
	surface.metalness = gbuffer.buffer2.x;
	surface.smoothness = gbuffer.buffer2.y;
	surface.inverse_occlusion = gbuffer.buffer2.z;
	
	surface.emissive = gbuffer.buffer3.xyz;
	
	//vec4 unprojected_position = vec4( uv0.x*2 - 1, -(uv0.y*2 - 1), gbuffer.depth*2 - 1, 1.0 );
	vec4 unprojected_position = vec4( uv0.x*2 - 1, -(uv0.y*2 - 1), gbuffer.depth, 1.0 );
	vec4 undivided_position = sys_ViewProjectionMatrixInverse * vec4( unprojected_position.xyz, 1.0 );
	surface.world_position = undivided_position.xyz / undivided_position.w;
}

void SampleGBuffer ( out rrGBufferValues gbuffer, in vec2 uv0 )
{
	ivec2 pixelLookup = ivec2(uv0.x * sys_ScreenSize.x, uv0.y * sys_ScreenSize.y);
	
	gbuffer.buffer0 = texelFetch( textureSampler0, pixelLookup, 0 );
	gbuffer.buffer1 = texelFetch( textureSampler1, pixelLookup, 0).xy;
	gbuffer.buffer2 = texture( textureSampler2, uv0 );
	gbuffer.buffer3 = texture( textureSampler3, uv0 );
	gbuffer.depth = texture( textureSampler4, uv0 ).x;
}

#endif//DEFERRED_PASS_SHADE_COMMON_P_GLSLI_
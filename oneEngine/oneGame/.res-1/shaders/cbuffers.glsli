#ifndef CBUFFERS_GLSLI
#define CBUFFERS_GLSLI

#extension GL_EXT_scalar_block_layout : require

#include "common.glsli"

layout(binding = CBUFFER_PER_OBJECT_MATRICES, std140) uniform sys_cbuffer_PerObject
{
	// The full world translation matrix.
	mat4	sys_ModelTRS;
	mat4	sys_ModelTRSInverse;
	// The world rotation-only matrix.
	mat4	sys_ModelR;
	mat4	sys_ModelRInverse;
};

layout(binding = CBUFFER_PER_OBJECT_EXTENDED, std430) uniform sys_cbuffer_PerObjectExt
{
    vec4    sys_DiffuseColor;
	float	sys_BaseSmoothness;
	float	sys_ScaledSmoothness;
    float	sys_BaseMetallicness;
	float	sys_ScaledMetallicness;
    vec3    sys_EmissiveColor;
    float   sys_AlphaCutoff;
    vec3    sys_LightingOverrides;
	int		sys_ShadingModel;

    vec4    sys_TextureScale;
    vec4    sys_TextureOffset;
};

layout(binding = CBUFFER_PER_CAMERA_INFORMATION, std430) uniform sys_cbuffer_PerCamera
{
    mat4 sys_ViewProjectionMatrix;
	mat4 sys_ViewProjectionMatrixInverse;
	mat4 sys_ViewMatrix;
	mat4 sys_ViewMatrixInverse;
	mat4 sys_ProjectionMatrix;
	mat4 sys_ProjectionMatrixInverse;
    vec4 sys_WorldCameraPos;
    vec4 sys_ViewportInfo;
    vec2 sys_ScreenSize;
    vec2 sys_PixelRatio;
	float sys_CameraNearPlane;
	float sys_CameraFarPlane;
};

layout(binding = CBUFFER_PER_FRAME_INFORMATION, std140) uniform sys_cbuffer_PerFrame
{
    // Time inputs
	vec4    sys_Time;
    vec4    sys_SinTime;
    vec4    sys_CosTime;

    // Fog
	vec4	sys_FogColor;
	vec4	sys_AtmoColor;
	float 	sys_FogEnd;
	float 	sys_FogScale;
	
	// Other
	int		sys_FrameIndex;
};

// TODO: Remove? It's unused...
layout(binding = CBUFFER_PER_PASS_INFORMATION, std140) uniform sys_cbuffer_PerPass
{
	vec4	sys_PassAmbientLightFallback;
	int		sys_PassLightNumber;
	int		sys_Pass_Unused1;
	int		sys_Pass_Unused2;
	int		sys_Pass_Unused3;
	vec4	sys_PassLightParamHack;
	int		sys_Pass_Unused4;
	int		sys_Pass_Unused5;
	int		sys_Pass_Unused6;
	int		sys_Pass_Unused7;
};

#endif//CBUFFERS_GLSLI

#include "after/terrain/VoxelTerrain.h"
#include "CVoxelMesher.h"

#include "core/math/Math.h"
#include "core-ext/math/MathQEF.h"

#include "after/types/terrain/BlockData.h"
#include "after/types/terrain/BlockType.h"

using Terrain::_normal_bias;
using Terrain::_depth_bias;
using namespace Terrain;

struct CVoxelMesher::TransitionSampleData
{
	Vector3d high [9];
	Vector3d low [4];
};

inline Vector3d VertexInterp( Real isolevel, const Vector3d & p1, const Vector3d & p2, Real valp1, Real valp2 )
{
   ftype mu;
   Vector3d p;

   if ( abs(isolevel-valp1) < FTYPE_PRECISION )
      return(p1);
   if ( abs(isolevel-valp2) < FTYPE_PRECISION )
      return(p2);
   if ( abs(valp1-valp2) < FTYPE_PRECISION )
      return(p1);

   mu = Math.Clamp( (isolevel - valp1) / (valp2 - valp1), 0, 1 );
   p.x = p1.x + mu * (p2.x - p1.x);
   p.y = p1.y + mu * (p2.y - p1.y);
   p.z = p1.z + mu * (p2.z - p1.z);

   return(p);
}


void CVoxelMesher::Triangulate_TVMC( uint x, uint y, uint z )
{
	//const ftype n_halfStep = m_step * 0.5;

	// Initialize the Terrain tracker structures
	static Terrain::terra_b t_blockSamples[8];
			
	// Create cube point list
	/*Vector3d t_vectorGrid[8];
	t_vectorGrid[0] = Vector3d( 0,0,0 );
	t_vectorGrid[1] = Vector3d( 1,0,0 );
	t_vectorGrid[2] = Vector3d( 1,1,0 );
	t_vectorGrid[3] = Vector3d( 0,1,0 );
	t_vectorGrid[4] = Vector3d( 0,0,1 );
	t_vectorGrid[5] = Vector3d( 1,0,1 );
	t_vectorGrid[6] = Vector3d( 1,1,1 );
	t_vectorGrid[7] = Vector3d( 0,1,1 );
	for ( char i = 0; i < 8; ++i ) {
		t_vectorGrid[i] = Vector3d( x,y,z ) + (t_vectorGrid[i]*m_step);
	}*/
	const Vector3d t_vectorGrid[8] = {
		Vector3d( x,y,z ),
		Vector3d( x+1,y,z ),
		Vector3d( x+1,y+1,z ),
		Vector3d( x,y+1,z ),
		Vector3d( x,y,z+1 ),
		Vector3d( x+1,y,z+1 ),
		Vector3d( x+1,y+1,z+1 ),
		Vector3d( x,y+1,z+1 )
	};
	static const WorldVector t_offsetGrid[8] = {
		WorldVector( 0,0,0 ),
		WorldVector( 1,0,0 ),
		WorldVector( 1,1,0 ),
		WorldVector( 0,1,0 ),
		WorldVector( 0,0,0 ),
		WorldVector( 1,0,0 ),
		WorldVector( 1,1,0 ),
		WorldVector( 0,1,0 )
	};

	// Sample the terrain information
	for ( int i = 0; i < 8; ++i ) {
		//m_terrain->SampleBlock( t_vectorGrid[i] + Vector3d( n_halfStep,n_halfStep,n_halfStep ), t_blockSamples[i].raw );
		m_buffer->GetData( t_blockSamples[i].raw, WorldVector(x,y,z)+t_offsetGrid[i] );
	}
	bool t_blockBinaryDensity [8];
	Real t_blockFloatDensity [8];
	for ( int i = 0; i < 8; ++i ) {
		t_blockBinaryDensity[i] = Terrain::Checker::BlocktypeOpaque( t_blockSamples[i].block );
		if ( t_blockBinaryDensity[i] ) {
			t_blockFloatDensity[i] = (t_blockSamples[i].normal_x_w * (1/15.0f))*0.5f + 0.5f;
		}
		else {
			t_blockFloatDensity[i] = 0;
		}
	}

	// Create the cube index
	int cubeindex = 0;
	for ( int i = 0; i < 8; ++i ) {
		if ( t_blockBinaryDensity[i] ) {
			cubeindex |= (1 << i);
		}
	}

	// Cube is entirely in/out of the surface
	if ( edgeTable[cubeindex] == 0 )
		return;

	Vector3d vertlist[12];
	Vector3d normlist[12];
	static int intersections[12][2] = {
        { 0, 1 }, { 1, 2 }, { 2, 3 }, { 3, 0 }, { 4, 5 }, { 5, 6 },
        { 6, 7 }, { 7, 4 }, { 0, 4 }, { 1, 5 }, { 2, 6 }, { 3, 7 }
    };

	// Create edge vertices
	for ( char i = 0; i < 12; ++i )
	{
		if ( edgeTable[cubeindex] & (1 << i) ) {
			/*vertlist[i] = VertexInterp( 0.5f,
				t_vectorGrid[intersections[i][0]], t_vectorGrid[intersections[i][1]],
				t_blockFloatDensity[intersections[i][0]], t_blockFloatDensity[intersections[i][1]] );*/
			vertlist[i] = (t_vectorGrid[intersections[i][0]] + t_vectorGrid[intersections[i][1]])/2;
			//m_terrain->SampleNormal ( vertlist[i], normlist[i] );
			normlist[i] = Vector3d(
				_normal_bias(t_blockSamples[i].normal_y_x)+_normal_bias(t_blockSamples[i].normal_z_x),
				_normal_bias(t_blockSamples[i].normal_x_y)+_normal_bias(t_blockSamples[i].normal_z_y),
				_normal_bias(t_blockSamples[i].normal_x_z)+_normal_bias(t_blockSamples[i].normal_y_z) ).normal();
		}
	}
				
	// Create the triangles
	for ( int i = 0; triTable[cubeindex][i] != -1; i += 3 )
	{
		// Vertex position
		vertices[vertexCount  ].x = vertlist[triTable[cubeindex][i  ]].x;
		vertices[vertexCount  ].y = vertlist[triTable[cubeindex][i  ]].y;
		vertices[vertexCount  ].z = vertlist[triTable[cubeindex][i  ]].z;

		vertices[vertexCount+1].x = vertlist[triTable[cubeindex][i+1]].x;
		vertices[vertexCount+1].y = vertlist[triTable[cubeindex][i+1]].y;
		vertices[vertexCount+1].z = vertlist[triTable[cubeindex][i+1]].z;

		vertices[vertexCount+2].x = vertlist[triTable[cubeindex][i+2]].x;
		vertices[vertexCount+2].y = vertlist[triTable[cubeindex][i+2]].y;
		vertices[vertexCount+2].z = vertlist[triTable[cubeindex][i+2]].z;

		//normlist[triTable[cubeindex][i  ]].normalize();
		vertices[vertexCount  ].nx = normlist[triTable[cubeindex][i  ]].x;
		vertices[vertexCount  ].ny = normlist[triTable[cubeindex][i  ]].y;
		vertices[vertexCount  ].nz = normlist[triTable[cubeindex][i  ]].z;

		//normlist[triTable[cubeindex][i+1]].normalize();
		vertices[vertexCount+1].nx = normlist[triTable[cubeindex][i+1]].x;
		vertices[vertexCount+1].ny = normlist[triTable[cubeindex][i+1]].y;
		vertices[vertexCount+1].nz = normlist[triTable[cubeindex][i+1]].z;

		//normlist[triTable[cubeindex][i+2]].normalize();
		vertices[vertexCount+2].nx = normlist[triTable[cubeindex][i+2]].x;
		vertices[vertexCount+2].ny = normlist[triTable[cubeindex][i+2]].y;
		vertices[vertexCount+2].nz = normlist[triTable[cubeindex][i+2]].z;

		for ( int v = 0; v < 3; ++v ) {
			vertices[vertexCount+v].r = 1; // ambient color
			vertices[vertexCount+v].g = 0; // specular lighting
			vertices[vertexCount+v].b = 1; // saturation
			vertices[vertexCount+v].a = 0; // glow amount
			// l4 used for change brightness
			vertices[vertexCount+v].l4 = 1;
			// m4 used for change hue
			vertices[vertexCount+v].m4 = 0;
			// texture data
			vertices[vertexCount+v].u = BlockGetTexW(EB_DIRT);
			vertices[vertexCount+v].l1 = 1.0f;
			vertices[vertexCount+v].m1 = BlockGetTexScale(EB_DIRT);
			vertices[vertexCount+v].v = BlockGetTexW(EB_DIRT);
			vertices[vertexCount+v].l2 = 1.0f;
			vertices[vertexCount+v].m2 = BlockGetTexScale(EB_DIRT);
			vertices[vertexCount+v].w = BlockGetTexW(EB_DIRT);
			vertices[vertexCount+v].l3 = 1.0f;
			vertices[vertexCount+v].m3 = BlockGetTexScale(EB_DIRT);
		}

		triangles[triangleCount].vert[0] = vertexCount+2;
		triangles[triangleCount].vert[1] = vertexCount+1;
		triangles[triangleCount].vert[2] = vertexCount+0;

		vertexCount += 3;
		triangleCount += 1;
	}

}

//
//void CVoxelMesher::Triangulate_TVMC_BORDER( Real x, Real y, Real z, const uint border )
//{
//	const ftype n_halfStep = m_step * 0.5;
//
//	// Initialize the Terrain tracker structures
//	static Terrain::terra_b t_blockSamples[0xD];
//			
//	// Create cube point list
//	/*Vector3d t_vectorGrid[8];
//	t_vectorGrid[0] = Vector3d( 0,0,0 );
//	t_vectorGrid[1] = Vector3d( 1,0,0 );
//	t_vectorGrid[2] = Vector3d( 1,1,0 );
//	t_vectorGrid[3] = Vector3d( 0,1,0 );
//	t_vectorGrid[4] = Vector3d( 0,0,1 );
//	t_vectorGrid[5] = Vector3d( 1,0,1 );
//	t_vectorGrid[6] = Vector3d( 1,1,1 );
//	t_vectorGrid[7] = Vector3d( 0,1,1 );
//	for ( char i = 0; i < 8; ++i ) {
//		t_vectorGrid[i] = Vector3d( x,y,z ) + (t_vectorGrid[i]*m_step);
//	}*/
//	Vector3d t_vectorGrid[0xD];
//	Vector3d* p_vectorGrid = (Vector3d*)(&(transitionSampleData[border]));
//	for ( int i = 0x0; i < 0xD; ++i ) {
//		t_vectorGrid[i] = p_vectorGrid[i]*n_halfStep + Vector3d( x,y,z );
//	}
//
//	// Sample the terrain information 
//	for ( int i = 0x0; i < 0x9; ++i ) {
//		m_terrain->SampleBlock( t_vectorGrid[i] + Vector3d( n_halfStep,n_halfStep,n_halfStep )*0.5f, t_blockSamples[i].raw );
//	}
//	for ( int i = 0x9; i < 0xD; ++i ) {
//		m_terrain->SampleBlock( t_vectorGrid[i] + Vector3d( n_halfStep,n_halfStep,n_halfStep ), t_blockSamples[i].raw );
//	}
//	bool t_blockBinaryDensity [0xD];
//	//Real t_blockFloatDensity [0xD];
//	for ( int i = 0x0; i < 0xD; ++i ) {
//		t_blockBinaryDensity[i] = Terrain::Checker::BlocktypeOpaque( t_blockSamples[i].block );
//		/*if ( t_blockBinaryDensity[i] ) {
//			t_blockFloatDensity[i] = (t_blockSamples[i].normal_x_w * (1/15.0f))*0.5f + 0.5f;
//		}
//		else {
//			t_blockFloatDensity[i] = 0;
//		}*/
//	}
//
//	// Create the cube index
//	long cubeindex = 0;
//	for ( int i = 0; i < 0xD; ++i ) {
//		if ( t_blockBinaryDensity[i] ) {
//			cubeindex |= (1 << i);
//		}
//	}
//
//	// Cube is entirely in/out of the surface
//	if ( edgeTable[cubeindex] == 0 )
//		return;
//
//	Vector3d vertlist[12];
//	Vector3d normlist[12];
//	static int intersections[12][2] = {
//        { 0, 1 }, { 1, 2 }, { 2, 3 }, { 3, 0 }, { 4, 5 }, { 5, 6 },
//        { 6, 7 }, { 7, 4 }, { 0, 4 }, { 1, 5 }, { 2, 6 }, { 3, 7 }
//    };
//
//	// Create edge vertices
//	for ( char i = 0; i < 12; ++i )
//	{
//		if ( edgeTable[cubeindex] & (1 << i) ) {
//			/*vertlist[i] = VertexInterp( 0.5f,
//				t_vectorGrid[intersections[i][0]], t_vectorGrid[intersections[i][1]],
//				t_blockFloatDensity[intersections[i][0]], t_blockFloatDensity[intersections[i][1]] );*/
//			vertlist[i] = (t_vectorGrid[intersections[i][0]] + t_vectorGrid[intersections[i][1]])/2;
//			//m_terrain->SampleNormal ( vertlist[i], normlist[i] );
//			normlist[i] = Vector3d(
//				_normal_bias(t_blockSamples[i].normal_y_x)+_normal_bias(t_blockSamples[i].normal_z_x),
//				_normal_bias(t_blockSamples[i].normal_x_y)+_normal_bias(t_blockSamples[i].normal_z_y),
//				_normal_bias(t_blockSamples[i].normal_x_z)+_normal_bias(t_blockSamples[i].normal_y_z) ).normal();
//		}
//	}
//				
//	// Create the triangles
//	for ( int i = 0; triTable[cubeindex][i] != -1; i += 3 )
//	{
//		// Vertex position
//		vertices[vertexCount  ].x = vertlist[triTable[cubeindex][i  ]].x;
//		vertices[vertexCount  ].y = vertlist[triTable[cubeindex][i  ]].y;
//		vertices[vertexCount  ].z = vertlist[triTable[cubeindex][i  ]].z;
//
//		vertices[vertexCount+1].x = vertlist[triTable[cubeindex][i+1]].x;
//		vertices[vertexCount+1].y = vertlist[triTable[cubeindex][i+1]].y;
//		vertices[vertexCount+1].z = vertlist[triTable[cubeindex][i+1]].z;
//
//		vertices[vertexCount+2].x = vertlist[triTable[cubeindex][i+2]].x;
//		vertices[vertexCount+2].y = vertlist[triTable[cubeindex][i+2]].y;
//		vertices[vertexCount+2].z = vertlist[triTable[cubeindex][i+2]].z;
//
//		//normlist[triTable[cubeindex][i  ]].normalize();
//		vertices[vertexCount  ].nx = normlist[triTable[cubeindex][i  ]].x;
//		vertices[vertexCount  ].ny = normlist[triTable[cubeindex][i  ]].y;
//		vertices[vertexCount  ].nz = normlist[triTable[cubeindex][i  ]].z;
//
//		//normlist[triTable[cubeindex][i+1]].normalize();
//		vertices[vertexCount+1].nx = normlist[triTable[cubeindex][i+1]].x;
//		vertices[vertexCount+1].ny = normlist[triTable[cubeindex][i+1]].y;
//		vertices[vertexCount+1].nz = normlist[triTable[cubeindex][i+1]].z;
//
//		//normlist[triTable[cubeindex][i+2]].normalize();
//		vertices[vertexCount+2].nx = normlist[triTable[cubeindex][i+2]].x;
//		vertices[vertexCount+2].ny = normlist[triTable[cubeindex][i+2]].y;
//		vertices[vertexCount+2].nz = normlist[triTable[cubeindex][i+2]].z;
//
//		for ( int v = 0; v < 3; ++v ) {
//			vertices[vertexCount+v].r = 1; // ambient color
//			vertices[vertexCount+v].g = 0; // specular lighting
//			vertices[vertexCount+v].b = 1; // saturation
//			vertices[vertexCount+v].a = 0; // glow amount
//			// l4 used for change brightness
//			vertices[vertexCount+v].l4 = 1;
//			// m4 used for change hue
//			vertices[vertexCount+v].m4 = 0;
//			// texture data
//			vertices[vertexCount+v].u = BlockGetTexW(EB_DIRT);
//			vertices[vertexCount+v].l1 = 1.0f;
//			vertices[vertexCount+v].m1 = BlockGetTexScale(EB_DIRT);
//			vertices[vertexCount+v].v = BlockGetTexW(EB_DIRT);
//			vertices[vertexCount+v].l2 = 1.0f;
//			vertices[vertexCount+v].m2 = BlockGetTexScale(EB_DIRT);
//			vertices[vertexCount+v].w = BlockGetTexW(EB_DIRT);
//			vertices[vertexCount+v].l3 = 1.0f;
//			vertices[vertexCount+v].m3 = BlockGetTexScale(EB_DIRT);
//		}
//
//		triangles[triangleCount].vert[0] = vertexCount+2;
//		triangles[triangleCount].vert[1] = vertexCount+1;
//		triangles[triangleCount].vert[2] = vertexCount+0;
//
//		vertexCount += 3;
//		triangleCount += 1;
//	}
//
//}

const CVoxelMesher::TransitionSampleData CVoxelMesher::transitionSampleData[6] =
{
	{	{ Vector3d(0,0,0),Vector3d(0,1,0),Vector3d(0,2,0), Vector3d(0,0,1),Vector3d(0,1,1),Vector3d(0,2,1), Vector3d(0,0,2),Vector3d(0,1,2),Vector3d(0,2,2) },
		{ Vector3d(2,0,0),Vector3d(2,2,0),Vector3d(2,0,2),Vector3d(2,2,2) } },
	{	{ Vector3d(2,0,0),Vector3d(2,1,0),Vector3d(2,2,0), Vector3d(2,0,1),Vector3d(2,1,1),Vector3d(2,2,1), Vector3d(2,0,2),Vector3d(2,1,2),Vector3d(2,2,2) },
		{ Vector3d(0,0,0),Vector3d(0,2,0),Vector3d(0,0,2),Vector3d(0,2,2) } },
	{	{ Vector3d(0,0,0),Vector3d(1,0,0),Vector3d(2,0,0), Vector3d(0,0,1),Vector3d(1,0,1),Vector3d(2,0,1), Vector3d(0,0,2),Vector3d(1,0,2),Vector3d(2,0,2) },
		{ Vector3d(0,2,0),Vector3d(2,2,0),Vector3d(0,2,2),Vector3d(2,2,2) } },
	{	{ Vector3d(0,2,0),Vector3d(1,2,0),Vector3d(2,2,0), Vector3d(0,2,1),Vector3d(1,2,1),Vector3d(2,2,1), Vector3d(0,2,2),Vector3d(1,2,2),Vector3d(2,2,2) },
		{ Vector3d(0,0,0),Vector3d(2,0,0),Vector3d(0,0,2),Vector3d(2,0,2) } },
	{	{ Vector3d(0,0,0),Vector3d(1,0,0),Vector3d(2,0,0), Vector3d(0,1,0),Vector3d(1,1,0),Vector3d(2,1,0), Vector3d(0,2,0),Vector3d(1,2,0),Vector3d(2,2,0) },
		{ Vector3d(0,0,2),Vector3d(2,0,2),Vector3d(0,2,2),Vector3d(2,2,2) } },
	{	{ Vector3d(0,0,2),Vector3d(1,0,2),Vector3d(2,0,2), Vector3d(0,1,2),Vector3d(1,1,2),Vector3d(2,1,2), Vector3d(0,2,2),Vector3d(1,2,2),Vector3d(2,2,2) },
		{ Vector3d(0,0,0),Vector3d(2,0,0),Vector3d(0,2,0),Vector3d(2,2,0) } },
};



//================================================================================
//
// The Transvoxel Algorithm look-up tables
//
// The following data originates from Eric Lengyel's Transvoxel Algorithm.
// http://www.terathon.com/voxels/
//
//
// The format of the data in this file is described in the dissertation "Voxel-
// Based Terrain for Real-Time Virtual Simulations", available at the web page
// given above. References to sections and figures below pertain to that paper.
//
//================================================================================


// The RegularCellData structure holds information about the triangulation
// used for a single equivalence class in the modified Marching Cubes algorithm,
// described in Section 3.2.

struct CVoxelMesher::RegularCellData
{
	unsigned char	geometryCounts;		// High nibble is vertex count, low nibble is triangle count.
	unsigned char	vertexIndex[15];	// Groups of 3 indexes giving the triangulation.
	
	long GetVertexCount(void) const
	{
		return (geometryCounts >> 4);
	}
	
	long GetTriangleCount(void) const
	{
		return (geometryCounts & 0x0F);
	}
};


// The TransitionCellData structure holds information about the triangulation
// used for a single equivalence class in the Transvoxel Algorithm transition cell,
// described in Section 4.3.

struct CVoxelMesher::TransitionCellData
{
	long			geometryCounts;		// High nibble is vertex count, low nibble is triangle count.
	unsigned char	vertexIndex[36];	// Groups of 3 indexes giving the triangulation.
	
	long GetVertexCount(void) const
	{
		return (geometryCounts >> 4);
	}
	
	long GetTriangleCount(void) const
	{
		return (geometryCounts & 0x0F);
	}
};


// The regularCellClass table maps an 8-bit regular Marching Cubes case index to
// an equivalence class index. Even though there are 18 equivalence classes in our
// modified Marching Cubes algorithm, a couple of them use the same exact triangulations,
// just with different vertex locations. We combined those classes for this table so
// that the class index ranges from 0 to 15.

const unsigned char CVoxelMesher::regularCellClass[256] =
{
	0x00, 0x01, 0x01, 0x03, 0x01, 0x03, 0x02, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x04, 0x03,
	0x01, 0x03, 0x02, 0x04, 0x02, 0x04, 0x06, 0x0C, 0x02, 0x05, 0x05, 0x0B, 0x05, 0x0A, 0x07, 0x04,
	0x01, 0x02, 0x03, 0x04, 0x02, 0x05, 0x05, 0x0A, 0x02, 0x06, 0x04, 0x0C, 0x05, 0x07, 0x0B, 0x04,
	0x03, 0x04, 0x04, 0x03, 0x05, 0x0B, 0x07, 0x04, 0x05, 0x07, 0x0A, 0x04, 0x08, 0x0E, 0x0E, 0x03,
	0x01, 0x02, 0x02, 0x05, 0x03, 0x04, 0x05, 0x0B, 0x02, 0x06, 0x05, 0x07, 0x04, 0x0C, 0x0A, 0x04,
	0x03, 0x04, 0x05, 0x0A, 0x04, 0x03, 0x07, 0x04, 0x05, 0x07, 0x08, 0x0E, 0x0B, 0x04, 0x0E, 0x03,
	0x02, 0x06, 0x05, 0x07, 0x05, 0x07, 0x08, 0x0E, 0x06, 0x09, 0x07, 0x0F, 0x07, 0x0F, 0x0E, 0x0D,
	0x04, 0x0C, 0x0B, 0x04, 0x0A, 0x04, 0x0E, 0x03, 0x07, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x02, 0x01,
	0x01, 0x02, 0x02, 0x05, 0x02, 0x05, 0x06, 0x07, 0x03, 0x05, 0x04, 0x0A, 0x04, 0x0B, 0x0C, 0x04,
	0x02, 0x05, 0x06, 0x07, 0x06, 0x07, 0x09, 0x0F, 0x05, 0x08, 0x07, 0x0E, 0x07, 0x0E, 0x0F, 0x0D,
	0x03, 0x05, 0x04, 0x0B, 0x05, 0x08, 0x07, 0x0E, 0x04, 0x07, 0x03, 0x04, 0x0A, 0x0E, 0x04, 0x03,
	0x04, 0x0A, 0x0C, 0x04, 0x07, 0x0E, 0x0F, 0x0D, 0x0B, 0x0E, 0x04, 0x03, 0x0E, 0x02, 0x0D, 0x01,
	0x03, 0x05, 0x05, 0x08, 0x04, 0x0A, 0x07, 0x0E, 0x04, 0x07, 0x0B, 0x0E, 0x03, 0x04, 0x04, 0x03,
	0x04, 0x0B, 0x07, 0x0E, 0x0C, 0x04, 0x0F, 0x0D, 0x0A, 0x0E, 0x0E, 0x02, 0x04, 0x03, 0x0D, 0x01,
	0x04, 0x07, 0x0A, 0x0E, 0x0B, 0x0E, 0x0E, 0x02, 0x0C, 0x0F, 0x04, 0x0D, 0x04, 0x0D, 0x03, 0x01,
	0x03, 0x04, 0x04, 0x03, 0x04, 0x03, 0x0D, 0x01, 0x04, 0x0D, 0x03, 0x01, 0x03, 0x01, 0x01, 0x00
};


// The regularCellData table holds the triangulation data for all 16 distinct classes to
// which a case can be mapped by the regularCellClass table.

const CVoxelMesher::RegularCellData CVoxelMesher::regularCellData[16] =
{
	{0x00, {}},
	{0x31, {0, 1, 2}},
	{0x62, {0, 1, 2, 3, 4, 5}},
	{0x42, {0, 1, 2, 0, 2, 3}},
	{0x53, {0, 1, 4, 1, 3, 4, 1, 2, 3}},
	{0x73, {0, 1, 2, 0, 2, 3, 4, 5, 6}},
	{0x93, {0, 1, 2, 3, 4, 5, 6, 7, 8}},
	{0x84, {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7}},
	{0x84, {0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7}},
	{0xC4, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}},
	{0x64, {0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3}},
	{0x64, {0, 5, 4, 0, 4, 1, 1, 4, 3, 1, 3, 2}},
	{0x64, {0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3}},
	{0x64, {0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5}},
	{0x75, {0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6}},
	{0x95, {0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 6, 7, 8}}
};


// The regularVertexData table gives the vertex locations for every one of the 256 possible
// cases in the modified Marching Cubes algorithm. Each 16-bit value also provides information
// about whether a vertex can be reused from a neighboring cell. See Section 3.3 for details.
// The low byte contains the indexes for the two endpoints of the edge on which the vertex lies,
// as numbered in Figure 3.7. The high byte contains the vertex reuse data shown in Figure 3.8.

const unsigned short CVoxelMesher::regularVertexData[256][12] =
{
	{},
	{0x6201, 0x5102, 0x3304},
	{0x6201, 0x2315, 0x4113},
	{0x5102, 0x3304, 0x2315, 0x4113},
	{0x5102, 0x4223, 0x1326},
	{0x3304, 0x6201, 0x4223, 0x1326},
	{0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326},
	{0x4223, 0x1326, 0x3304, 0x2315, 0x4113},
	{0x4113, 0x8337, 0x4223},
	{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337},
	{0x6201, 0x2315, 0x8337, 0x4223},
	{0x5102, 0x3304, 0x2315, 0x8337, 0x4223},
	{0x5102, 0x4113, 0x8337, 0x1326},
	{0x4113, 0x8337, 0x1326, 0x3304, 0x6201},
	{0x6201, 0x2315, 0x8337, 0x1326, 0x5102},
	{0x3304, 0x2315, 0x8337, 0x1326},
	{0x3304, 0x1146, 0x2245},
	{0x6201, 0x5102, 0x1146, 0x2245},
	{0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245},
	{0x2315, 0x4113, 0x5102, 0x1146, 0x2245},
	{0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245},
	{0x1146, 0x2245, 0x6201, 0x4223, 0x1326},
	{0x3304, 0x1146, 0x2245, 0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326},
	{0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x4113},
	{0x4223, 0x4113, 0x8337, 0x3304, 0x1146, 0x2245},
	{0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8337},
	{0x4223, 0x6201, 0x2315, 0x8337, 0x3304, 0x1146, 0x2245},
	{0x4223, 0x8337, 0x2315, 0x2245, 0x1146, 0x5102},
	{0x5102, 0x4113, 0x8337, 0x1326, 0x3304, 0x1146, 0x2245},
	{0x4113, 0x8337, 0x1326, 0x1146, 0x2245, 0x6201},
	{0x6201, 0x2315, 0x8337, 0x1326, 0x5102, 0x3304, 0x1146, 0x2245},
	{0x2245, 0x2315, 0x8337, 0x1326, 0x1146},
	{0x2315, 0x2245, 0x8157},
	{0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157},
	{0x4113, 0x6201, 0x2245, 0x8157},
	{0x2245, 0x8157, 0x4113, 0x5102, 0x3304},
	{0x5102, 0x4223, 0x1326, 0x2315, 0x2245, 0x8157},
	{0x6201, 0x4223, 0x1326, 0x3304, 0x2315, 0x2245, 0x8157},
	{0x6201, 0x2245, 0x8157, 0x4113, 0x5102, 0x4223, 0x1326},
	{0x4223, 0x1326, 0x3304, 0x2245, 0x8157, 0x4113},
	{0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
	{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
	{0x8337, 0x4223, 0x6201, 0x2245, 0x8157},
	{0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x4223},
	{0x5102, 0x4113, 0x8337, 0x1326, 0x2315, 0x2245, 0x8157},
	{0x4113, 0x8337, 0x1326, 0x3304, 0x6201, 0x2315, 0x2245, 0x8157},
	{0x5102, 0x1326, 0x8337, 0x8157, 0x2245, 0x6201},
	{0x8157, 0x8337, 0x1326, 0x3304, 0x2245},
	{0x2315, 0x3304, 0x1146, 0x8157},
	{0x6201, 0x5102, 0x1146, 0x8157, 0x2315},
	{0x3304, 0x1146, 0x8157, 0x4113, 0x6201},
	{0x4113, 0x5102, 0x1146, 0x8157},
	{0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4223, 0x1326},
	{0x1326, 0x4223, 0x6201, 0x2315, 0x8157, 0x1146},
	{0x3304, 0x1146, 0x8157, 0x4113, 0x6201, 0x5102, 0x4223, 0x1326},
	{0x1326, 0x1146, 0x8157, 0x4113, 0x4223},
	{0x2315, 0x3304, 0x1146, 0x8157, 0x4223, 0x4113, 0x8337},
	{0x6201, 0x5102, 0x1146, 0x8157, 0x2315, 0x4223, 0x4113, 0x8337},
	{0x3304, 0x1146, 0x8157, 0x8337, 0x4223, 0x6201},
	{0x4223, 0x5102, 0x1146, 0x8157, 0x8337},
	{0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4113, 0x8337, 0x1326},
	{0x6201, 0x4113, 0x8337, 0x1326, 0x1146, 0x8157, 0x2315},
	{0x6201, 0x3304, 0x1146, 0x8157, 0x8337, 0x1326, 0x5102},
	{0x1326, 0x1146, 0x8157, 0x8337},
	{0x1326, 0x8267, 0x1146},
	{0x6201, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146},
	{0x6201, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146},
	{0x5102, 0x3304, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146},
	{0x5102, 0x4223, 0x8267, 0x1146},
	{0x3304, 0x6201, 0x4223, 0x8267, 0x1146},
	{0x5102, 0x4223, 0x8267, 0x1146, 0x6201, 0x2315, 0x4113},
	{0x1146, 0x8267, 0x4223, 0x4113, 0x2315, 0x3304},
	{0x4113, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
	{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x1326, 0x8267, 0x1146},
	{0x6201, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
	{0x5102, 0x3304, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
	{0x8267, 0x1146, 0x5102, 0x4113, 0x8337},
	{0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304},
	{0x6201, 0x2315, 0x8337, 0x8267, 0x1146, 0x5102},
	{0x1146, 0x3304, 0x2315, 0x8337, 0x8267},
	{0x3304, 0x1326, 0x8267, 0x2245},
	{0x1326, 0x8267, 0x2245, 0x6201, 0x5102},
	{0x3304, 0x1326, 0x8267, 0x2245, 0x6201, 0x2315, 0x4113},
	{0x1326, 0x8267, 0x2245, 0x2315, 0x4113, 0x5102},
	{0x5102, 0x4223, 0x8267, 0x2245, 0x3304},
	{0x6201, 0x4223, 0x8267, 0x2245},
	{0x5102, 0x4223, 0x8267, 0x2245, 0x3304, 0x6201, 0x2315, 0x4113},
	{0x4113, 0x4223, 0x8267, 0x2245, 0x2315},
	{0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x4113, 0x8337},
	{0x1326, 0x8267, 0x2245, 0x6201, 0x5102, 0x4223, 0x4113, 0x8337},
	{0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x6201, 0x2315, 0x8337},
	{0x5102, 0x1326, 0x8267, 0x2245, 0x2315, 0x8337, 0x4223},
	{0x3304, 0x2245, 0x8267, 0x8337, 0x4113, 0x5102},
	{0x8337, 0x8267, 0x2245, 0x6201, 0x4113},
	{0x5102, 0x6201, 0x2315, 0x8337, 0x8267, 0x2245, 0x3304},
	{0x2315, 0x8337, 0x8267, 0x2245},
	{0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	{0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	{0x6201, 0x2245, 0x8157, 0x4113, 0x1326, 0x8267, 0x1146},
	{0x2245, 0x8157, 0x4113, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146},
	{0x4223, 0x8267, 0x1146, 0x5102, 0x2315, 0x2245, 0x8157},
	{0x3304, 0x6201, 0x4223, 0x8267, 0x1146, 0x2315, 0x2245, 0x8157},
	{0x4223, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157, 0x4113},
	{0x3304, 0x2245, 0x8157, 0x4113, 0x4223, 0x8267, 0x1146},
	{0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	{0x8337, 0x4223, 0x6201, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	{0x4223, 0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x1326, 0x8267, 0x1146},
	{0x8267, 0x1146, 0x5102, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
	{0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304, 0x2315, 0x2245, 0x8157},
	{0x8337, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157},
	{0x3304, 0x2245, 0x8157, 0x8337, 0x8267, 0x1146},
	{0x8157, 0x2315, 0x3304, 0x1326, 0x8267},
	{0x8267, 0x8157, 0x2315, 0x6201, 0x5102, 0x1326},
	{0x8267, 0x1326, 0x3304, 0x6201, 0x4113, 0x8157},
	{0x8267, 0x8157, 0x4113, 0x5102, 0x1326},
	{0x5102, 0x4223, 0x8267, 0x8157, 0x2315, 0x3304},
	{0x2315, 0x6201, 0x4223, 0x8267, 0x8157},
	{0x3304, 0x5102, 0x4223, 0x8267, 0x8157, 0x4113, 0x6201},
	{0x4113, 0x4223, 0x8267, 0x8157},
	{0x8157, 0x2315, 0x3304, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337},
	{0x8157, 0x2315, 0x6201, 0x5102, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337},
	{0x8157, 0x8337, 0x4223, 0x6201, 0x3304, 0x1326, 0x8267},
	{0x5102, 0x1326, 0x8267, 0x8157, 0x8337, 0x4223},
	{0x8267, 0x8157, 0x2315, 0x3304, 0x5102, 0x4113, 0x8337},
	{0x6201, 0x4113, 0x8337, 0x8267, 0x8157, 0x2315},
	{0x6201, 0x3304, 0x5102, 0x8337, 0x8267, 0x8157},
	{0x8337, 0x8267, 0x8157},
	{0x8337, 0x8157, 0x8267},
	{0x6201, 0x5102, 0x3304, 0x8337, 0x8157, 0x8267},
	{0x6201, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
	{0x5102, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
	{0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
	{0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x8157, 0x8267},
	{0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
	{0x4223, 0x1326, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
	{0x4113, 0x8157, 0x8267, 0x4223},
	{0x4223, 0x4113, 0x8157, 0x8267, 0x6201, 0x5102, 0x3304},
	{0x8157, 0x8267, 0x4223, 0x6201, 0x2315},
	{0x3304, 0x2315, 0x8157, 0x8267, 0x4223, 0x5102},
	{0x1326, 0x5102, 0x4113, 0x8157, 0x8267},
	{0x8157, 0x4113, 0x6201, 0x3304, 0x1326, 0x8267},
	{0x1326, 0x5102, 0x6201, 0x2315, 0x8157, 0x8267},
	{0x8267, 0x1326, 0x3304, 0x2315, 0x8157},
	{0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	{0x6201, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	{0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	{0x2315, 0x4113, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	{0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	{0x1146, 0x2245, 0x6201, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
	{0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	{0x4113, 0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x8337, 0x8157, 0x8267},
	{0x4223, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245},
	{0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8157, 0x8267},
	{0x8157, 0x8267, 0x4223, 0x6201, 0x2315, 0x3304, 0x1146, 0x2245},
	{0x2315, 0x8157, 0x8267, 0x4223, 0x5102, 0x1146, 0x2245},
	{0x1326, 0x5102, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245},
	{0x1326, 0x1146, 0x2245, 0x6201, 0x4113, 0x8157, 0x8267},
	{0x5102, 0x6201, 0x2315, 0x8157, 0x8267, 0x1326, 0x3304, 0x1146, 0x2245},
	{0x1326, 0x1146, 0x2245, 0x2315, 0x8157, 0x8267},
	{0x2315, 0x2245, 0x8267, 0x8337},
	{0x2315, 0x2245, 0x8267, 0x8337, 0x6201, 0x5102, 0x3304},
	{0x4113, 0x6201, 0x2245, 0x8267, 0x8337},
	{0x5102, 0x4113, 0x8337, 0x8267, 0x2245, 0x3304},
	{0x2315, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326},
	{0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x2315, 0x2245, 0x8267},
	{0x4113, 0x6201, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326},
	{0x4113, 0x4223, 0x1326, 0x3304, 0x2245, 0x8267, 0x8337},
	{0x2315, 0x2245, 0x8267, 0x4223, 0x4113},
	{0x2315, 0x2245, 0x8267, 0x4223, 0x4113, 0x6201, 0x5102, 0x3304},
	{0x6201, 0x2245, 0x8267, 0x4223},
	{0x3304, 0x2245, 0x8267, 0x4223, 0x5102},
	{0x5102, 0x4113, 0x2315, 0x2245, 0x8267, 0x1326},
	{0x4113, 0x2315, 0x2245, 0x8267, 0x1326, 0x3304, 0x6201},
	{0x5102, 0x6201, 0x2245, 0x8267, 0x1326},
	{0x3304, 0x2245, 0x8267, 0x1326},
	{0x8267, 0x8337, 0x2315, 0x3304, 0x1146},
	{0x5102, 0x1146, 0x8267, 0x8337, 0x2315, 0x6201},
	{0x3304, 0x1146, 0x8267, 0x8337, 0x4113, 0x6201},
	{0x8337, 0x4113, 0x5102, 0x1146, 0x8267},
	{0x8267, 0x8337, 0x2315, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326},
	{0x1146, 0x8267, 0x8337, 0x2315, 0x6201, 0x4223, 0x1326},
	{0x8267, 0x8337, 0x4113, 0x6201, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326},
	{0x4113, 0x4223, 0x1326, 0x1146, 0x8267, 0x8337},
	{0x3304, 0x2315, 0x4113, 0x4223, 0x8267, 0x1146},
	{0x2315, 0x6201, 0x5102, 0x1146, 0x8267, 0x4223, 0x4113},
	{0x1146, 0x8267, 0x4223, 0x6201, 0x3304},
	{0x5102, 0x1146, 0x8267, 0x4223},
	{0x8267, 0x1326, 0x5102, 0x4113, 0x2315, 0x3304, 0x1146},
	{0x6201, 0x4113, 0x2315, 0x1326, 0x1146, 0x8267},
	{0x6201, 0x3304, 0x1146, 0x8267, 0x1326, 0x5102},
	{0x1326, 0x1146, 0x8267},
	{0x1326, 0x8337, 0x8157, 0x1146},
	{0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304},
	{0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x2315, 0x4113},
	{0x4113, 0x5102, 0x3304, 0x2315, 0x1326, 0x8337, 0x8157, 0x1146},
	{0x8337, 0x8157, 0x1146, 0x5102, 0x4223},
	{0x6201, 0x4223, 0x8337, 0x8157, 0x1146, 0x3304},
	{0x8337, 0x8157, 0x1146, 0x5102, 0x4223, 0x6201, 0x2315, 0x4113},
	{0x4223, 0x8337, 0x8157, 0x1146, 0x3304, 0x2315, 0x4113},
	{0x4223, 0x4113, 0x8157, 0x1146, 0x1326},
	{0x4223, 0x4113, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304},
	{0x1146, 0x8157, 0x2315, 0x6201, 0x4223, 0x1326},
	{0x4223, 0x5102, 0x3304, 0x2315, 0x8157, 0x1146, 0x1326},
	{0x4113, 0x8157, 0x1146, 0x5102},
	{0x6201, 0x4113, 0x8157, 0x1146, 0x3304},
	{0x2315, 0x8157, 0x1146, 0x5102, 0x6201},
	{0x2315, 0x8157, 0x1146, 0x3304},
	{0x2245, 0x3304, 0x1326, 0x8337, 0x8157},
	{0x6201, 0x2245, 0x8157, 0x8337, 0x1326, 0x5102},
	{0x2245, 0x3304, 0x1326, 0x8337, 0x8157, 0x6201, 0x2315, 0x4113},
	{0x2245, 0x2315, 0x4113, 0x5102, 0x1326, 0x8337, 0x8157},
	{0x4223, 0x8337, 0x8157, 0x2245, 0x3304, 0x5102},
	{0x8157, 0x2245, 0x6201, 0x4223, 0x8337},
	{0x2245, 0x3304, 0x5102, 0x4223, 0x8337, 0x8157, 0x4113, 0x6201, 0x2315},
	{0x4223, 0x8337, 0x8157, 0x2245, 0x2315, 0x4113},
	{0x4113, 0x8157, 0x2245, 0x3304, 0x1326, 0x4223},
	{0x1326, 0x4223, 0x4113, 0x8157, 0x2245, 0x6201, 0x5102},
	{0x8157, 0x2245, 0x3304, 0x1326, 0x4223, 0x6201, 0x2315},
	{0x5102, 0x1326, 0x4223, 0x2315, 0x8157, 0x2245},
	{0x3304, 0x5102, 0x4113, 0x8157, 0x2245},
	{0x4113, 0x8157, 0x2245, 0x6201},
	{0x5102, 0x6201, 0x2315, 0x8157, 0x2245, 0x3304},
	{0x2315, 0x8157, 0x2245},
	{0x1146, 0x1326, 0x8337, 0x2315, 0x2245},
	{0x1146, 0x1326, 0x8337, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304},
	{0x6201, 0x2245, 0x1146, 0x1326, 0x8337, 0x4113},
	{0x2245, 0x1146, 0x1326, 0x8337, 0x4113, 0x5102, 0x3304},
	{0x5102, 0x1146, 0x2245, 0x2315, 0x8337, 0x4223},
	{0x1146, 0x3304, 0x6201, 0x4223, 0x8337, 0x2315, 0x2245},
	{0x8337, 0x4113, 0x6201, 0x2245, 0x1146, 0x5102, 0x4223},
	{0x4223, 0x8337, 0x4113, 0x3304, 0x2245, 0x1146},
	{0x4113, 0x2315, 0x2245, 0x1146, 0x1326, 0x4223},
	{0x1146, 0x1326, 0x4223, 0x4113, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304},
	{0x1326, 0x4223, 0x6201, 0x2245, 0x1146},
	{0x4223, 0x5102, 0x3304, 0x2245, 0x1146, 0x1326},
	{0x2245, 0x1146, 0x5102, 0x4113, 0x2315},
	{0x4113, 0x2315, 0x2245, 0x1146, 0x3304, 0x6201},
	{0x6201, 0x2245, 0x1146, 0x5102},
	{0x3304, 0x2245, 0x1146},
	{0x3304, 0x1326, 0x8337, 0x2315},
	{0x5102, 0x1326, 0x8337, 0x2315, 0x6201},
	{0x6201, 0x3304, 0x1326, 0x8337, 0x4113},
	{0x5102, 0x1326, 0x8337, 0x4113},
	{0x4223, 0x8337, 0x2315, 0x3304, 0x5102},
	{0x6201, 0x4223, 0x8337, 0x2315},
	{0x3304, 0x5102, 0x4223, 0x8337, 0x4113, 0x6201},
	{0x4113, 0x4223, 0x8337},
	{0x4113, 0x2315, 0x3304, 0x1326, 0x4223},
	{0x1326, 0x4223, 0x4113, 0x2315, 0x6201, 0x5102},
	{0x3304, 0x1326, 0x4223, 0x6201},
	{0x5102, 0x1326, 0x4223},
	{0x5102, 0x4113, 0x2315, 0x3304},
	{0x6201, 0x4113, 0x2315},
	{0x6201, 0x3304, 0x5102},
	{}
};


// The transitionCellClass table maps a 9-bit transition cell case index to an equivalence
// class index. Even though there are 73 equivalence classes in the Transvoxel Algorithm,
// several of them use the same exact triangulations, just with different vertex locations.
// We combined those classes for this table so that the class index ranges from 0 to 55.
// The high bit is set in the cases for which the inverse state of the voxel data maps to
// the equivalence class, meaning that the winding order of each triangle should be reversed.

const unsigned char CVoxelMesher::transitionCellClass[512] =
{
	0x00, 0x01, 0x02, 0x84, 0x01, 0x05, 0x04, 0x04, 0x02, 0x87, 0x09, 0x8C, 0x84, 0x0B, 0x05, 0x05,
	0x01, 0x08, 0x07, 0x8D, 0x05, 0x0F, 0x8B, 0x0B, 0x04, 0x0D, 0x0C, 0x1C, 0x04, 0x8B, 0x85, 0x85,
	0x02, 0x07, 0x09, 0x8C, 0x87, 0x10, 0x0C, 0x0C, 0x09, 0x12, 0x15, 0x9A, 0x8C, 0x19, 0x90, 0x10,
	0x84, 0x8D, 0x8C, 0x9C, 0x0B, 0x9D, 0x0F, 0x0F, 0x05, 0x1B, 0x10, 0xAC, 0x05, 0x0F, 0x8B, 0x0B,
	0x01, 0x05, 0x87, 0x0B, 0x08, 0x0F, 0x0D, 0x8B, 0x07, 0x10, 0x12, 0x19, 0x8D, 0x9D, 0x1B, 0x0F,
	0x05, 0x0F, 0x10, 0x9D, 0x0F, 0x1E, 0x1D, 0xA1, 0x8B, 0x1D, 0x99, 0x32, 0x0B, 0xA1, 0x8F, 0x94,
	0x04, 0x8B, 0x0C, 0x0F, 0x0D, 0x1D, 0x1C, 0x8F, 0x0C, 0x99, 0x1A, 0x31, 0x1C, 0x32, 0x2C, 0xA7,
	0x04, 0x0B, 0x0C, 0x0F, 0x8B, 0xA1, 0x8F, 0x96, 0x85, 0x8F, 0x90, 0x27, 0x85, 0x94, 0x8B, 0x8A,
	0x02, 0x04, 0x09, 0x05, 0x07, 0x8B, 0x0C, 0x85, 0x09, 0x0C, 0x15, 0x90, 0x8C, 0x0F, 0x10, 0x8B,
	0x87, 0x0D, 0x12, 0x1B, 0x10, 0x1D, 0x99, 0x8F, 0x0C, 0x1C, 0x1A, 0x2C, 0x0C, 0x8F, 0x90, 0x8B,
	0x09, 0x0C, 0x15, 0x10, 0x12, 0x99, 0x1A, 0x90, 0x15, 0x1A, 0x23, 0x30, 0x9A, 0x31, 0x30, 0x19,
	0x8C, 0x1C, 0x9A, 0xAC, 0x19, 0x32, 0x31, 0x27, 0x90, 0x2C, 0x30, 0x29, 0x10, 0xA7, 0x19, 0x24,
	0x84, 0x04, 0x8C, 0x05, 0x8D, 0x0B, 0x1C, 0x85, 0x8C, 0x0C, 0x9A, 0x10, 0x9C, 0x0F, 0xAC, 0x0B,
	0x0B, 0x8B, 0x19, 0x0F, 0x9D, 0xA1, 0x32, 0x94, 0x0F, 0x8F, 0x31, 0xA7, 0x0F, 0x96, 0x27, 0x8A,
	0x05, 0x85, 0x90, 0x8B, 0x1B, 0x8F, 0x2C, 0x8B, 0x10, 0x90, 0x30, 0x19, 0xAC, 0x27, 0x29, 0x24,
	0x05, 0x85, 0x10, 0x0B, 0x0F, 0x94, 0xA7, 0x8A, 0x8B, 0x8B, 0x19, 0x24, 0x0B, 0x8A, 0x24, 0x83,
	0x03, 0x06, 0x0A, 0x8B, 0x06, 0x0E, 0x0B, 0x0B, 0x0A, 0x91, 0x14, 0x8F, 0x8B, 0x17, 0x05, 0x85,
	0x06, 0x13, 0x11, 0x98, 0x0E, 0x1F, 0x97, 0x2B, 0x0B, 0x18, 0x0F, 0x36, 0x0B, 0xAB, 0x05, 0x85,
	0x0A, 0x11, 0x16, 0x8F, 0x91, 0x20, 0x0F, 0x8F, 0x14, 0x22, 0x21, 0x1D, 0x8F, 0x2D, 0x0B, 0x8B,
	0x8B, 0x98, 0x8F, 0xB7, 0x17, 0xAE, 0x8C, 0x0C, 0x05, 0x2F, 0x8B, 0xB5, 0x85, 0xA6, 0x84, 0x04,
	0x06, 0x0E, 0x91, 0x17, 0x13, 0x1F, 0x18, 0xAB, 0x11, 0x20, 0x22, 0x2D, 0x98, 0xAE, 0x2F, 0xA6,
	0x0E, 0x1F, 0x20, 0xAE, 0x1F, 0x33, 0x2E, 0x2A, 0x97, 0x2E, 0xAD, 0x28, 0x2B, 0x2A, 0x26, 0x25,
	0x0B, 0x97, 0x0F, 0x8C, 0x18, 0x2E, 0x37, 0x8C, 0x0F, 0xAD, 0x9D, 0x90, 0x36, 0x28, 0x35, 0x07,
	0x0B, 0x2B, 0x8F, 0x0C, 0xAB, 0x2A, 0x8C, 0x89, 0x05, 0x26, 0x0B, 0x87, 0x85, 0x25, 0x84, 0x82,
	0x0A, 0x0B, 0x14, 0x05, 0x11, 0x97, 0x0F, 0x05, 0x16, 0x0F, 0x21, 0x0B, 0x8F, 0x8C, 0x8B, 0x84,
	0x91, 0x18, 0x22, 0x2F, 0x20, 0x2E, 0xAD, 0x26, 0x0F, 0x37, 0x9D, 0x35, 0x8F, 0x8C, 0x0B, 0x84,
	0x14, 0x0F, 0x21, 0x8B, 0x22, 0xAD, 0x9D, 0x0B, 0x21, 0x9D, 0x9E, 0x8F, 0x1D, 0x90, 0x8F, 0x85,
	0x8F, 0x36, 0x1D, 0xB5, 0x2D, 0x28, 0x90, 0x87, 0x0B, 0x35, 0x8F, 0x34, 0x8B, 0x07, 0x85, 0x81,
	0x8B, 0x0B, 0x8F, 0x85, 0x98, 0x2B, 0x36, 0x85, 0x8F, 0x8F, 0x1D, 0x8B, 0xB7, 0x0C, 0xB5, 0x04,
	0x17, 0xAB, 0x2D, 0xA6, 0xAE, 0x2A, 0x28, 0x25, 0x8C, 0x8C, 0x90, 0x07, 0x0C, 0x89, 0x87, 0x82,
	0x05, 0x05, 0x0B, 0x84, 0x2F, 0x26, 0x35, 0x84, 0x8B, 0x0B, 0x8F, 0x85, 0xB5, 0x87, 0x34, 0x81,
	0x85, 0x85, 0x8B, 0x04, 0xA6, 0x25, 0x07, 0x82, 0x84, 0x84, 0x85, 0x81, 0x04, 0x82, 0x81, 0x80
};


// The transitionCellData table holds the triangulation data for all 56 distinct classes to
// which a case can be mapped by the transitionCellClass table. The class index should be ANDed
// with 0x7F before using it to look up triangulation data in this table.

const CVoxelMesher::TransitionCellData CVoxelMesher::transitionCellData[56] =
{
	{0x00, {}},
	{0x42, {0, 1, 3, 1, 2, 3}},
	{0x31, {0, 1, 2}},
	{0x42, {0, 1, 2, 0, 2, 3}},
	{0x53, {0, 1, 4, 1, 3, 4, 1, 2, 3}},
	{0x64, {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4}},
	{0x84, {0, 1, 3, 1, 2, 3, 4, 5, 6, 4, 6, 7}},
	{0x73, {0, 1, 3, 1, 2, 3, 4, 5, 6}},
	{0x84, {0, 1, 3, 1, 2, 3, 4, 5, 7, 5, 6, 7}},
	{0x62, {0, 1, 2, 3, 4, 5}},
	{0x53, {0, 1, 3, 0, 3, 4, 1, 2, 3}},
	{0x75, {0, 1, 6, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5}},
	{0x84, {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7}},
	{0x95, {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 8, 6, 7, 8}},
	{0xA6, {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 8, 6, 8, 9}},
	{0x86, {0, 1, 7, 1, 2, 7, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6}},
	{0x95, {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 8}},
	{0x95, {0, 1, 3, 1, 2, 3, 4, 5, 7, 4, 7, 8, 5, 6, 7}},
	{0xA4, {0, 1, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
	{0xC6, {0, 1, 3, 1, 2, 3, 4, 5, 7, 5, 6, 7, 8, 9, 10, 8, 10, 11}},
	{0x64, {0, 1, 3, 1, 2, 3, 0, 3, 4, 0, 4, 5}},
	{0x93, {0, 1, 2, 3, 4, 5, 6, 7, 8}},
	{0x64, {0, 1, 4, 0, 4, 5, 1, 3, 4, 1, 2, 3}},
	{0x97, {0, 1, 8, 1, 7, 8, 1, 2, 7, 2, 3, 7, 3, 4, 7, 4, 5, 7, 5, 6, 7}},
	{0xB7, {0, 1, 6, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5, 7, 8, 10, 8, 9, 10}},
	{0xA6, {0, 1, 6, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5, 7, 8, 9}},
	{0xB5, {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7, 8, 9, 10}},
	{0xA6, {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 9, 7, 8, 9}},
	{0xA6, {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 9, 6, 8, 9, 6, 7, 8}},
	{0x97, {0, 1, 8, 1, 2, 8, 2, 3, 8, 3, 7, 8, 3, 4, 7, 4, 5, 7, 5, 6, 7}},
	{0x86, {0, 1, 7, 1, 6, 7, 1, 2, 6, 2, 5, 6, 2, 4, 5, 2, 3, 4}},
	{0xC8, {0, 1, 7, 1, 2, 7, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6, 8, 9, 10, 8, 10, 11}},
	{0xB7, {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 9, 10, 6, 7, 9, 7, 8, 9}},
	{0x75, {0, 1, 6, 1, 3, 6, 1, 2, 3, 3, 4, 6, 4, 5, 6}},
	{0xA6, {0, 1, 3, 1, 2, 3, 4, 5, 9, 5, 8, 9, 5, 6, 8, 6, 7, 8}},
	{0xC4, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}},
	{0x86, {1, 2, 4, 2, 3, 4, 0, 1, 7, 1, 4, 7, 4, 6, 7, 4, 5, 6}},
	{0x64, {0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3}},
	{0x86, {0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 4, 7, 4, 6, 7, 4, 5, 6}},
	{0x97, {1, 2, 3, 1, 3, 4, 1, 4, 5, 0, 1, 8, 1, 5, 8, 5, 7, 8, 5, 6, 7}},
	{0xA6, {0, 1, 3, 1, 2, 3, 4, 5, 9, 5, 8, 9, 5, 6, 8, 6, 7, 8}},
	{0xC8, {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 11, 7, 10, 11, 7, 8, 10, 8, 9, 10}},
	{0x97, {0, 1, 8, 1, 2, 8, 2, 7, 8, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6}},
	{0x97, {0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 4, 8, 4, 7, 8, 4, 5, 7, 5, 6, 7}},
	{0xB7, {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 10, 7, 9, 10, 7, 8, 9}},
	{0xA8, {0, 1, 9, 1, 2, 9, 2, 8, 9, 2, 3, 8, 3, 7, 8, 3, 4, 7, 4, 6, 7, 4, 5, 6}},
	{0xB9, {0, 1, 7, 1, 6, 7, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5, 0, 7, 10, 7, 9, 10, 7, 8, 9}},
	{0xA6, {0, 1, 5, 1, 4, 5, 1, 2, 4, 2, 3, 4, 6, 7, 9, 7, 8, 9}},
	{0xC6, {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11}},
	{0xB7, {0, 1, 7, 1, 2, 7, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6, 8, 9, 10}},
	{0xA8, {1, 2, 3, 1, 3, 4, 1, 4, 6, 4, 5, 6, 0, 1, 9, 1, 6, 9, 6, 8, 9, 6, 7, 8}},
	{0xCC, {0, 1, 9, 1, 8, 9, 1, 2, 8, 2, 11, 8, 2, 3, 11, 3, 4, 11, 4, 5, 11, 5, 10, 11, 5, 6, 10, 6, 9, 10, 6, 7, 9, 7, 0, 9}},
	{0x86, {0, 1, 2, 0, 2, 3, 0, 6, 7, 0, 3, 6, 1, 4, 5, 1, 5, 2}},
	{0x97, {0, 1, 4, 1, 3, 4, 1, 2, 3, 2, 5, 6, 2, 6, 3, 0, 7, 8, 0, 4, 7}},
	{0xA8, {0, 1, 5, 1, 4, 5, 1, 2, 4, 2, 3, 4, 3, 6, 7, 3, 7, 4, 0, 8, 9, 0, 5, 8}},
	{0xA8, {0, 1, 5, 1, 4, 5, 1, 2, 4, 2, 3, 4, 2, 6, 3, 3, 6, 7, 0, 8, 9, 0, 5, 8}}
};


// The transitionCornerData table contains the transition cell corner reuse data
// shown in Figure 4.18.

const unsigned char CVoxelMesher::transitionCornerData[13] =
{
	0x30, 0x21, 0x20, 0x12, 0x40, 0x82, 0x10, 0x81, 0x80, 0x37, 0x27, 0x17, 0x87
};


// The transitionVertexData table gives the vertex locations for every one of the 512 possible
// cases in the Tranvoxel Algorithm. Each 16-bit value also provides information about whether
// a vertex can be reused from a neighboring cell. See Section 4.5 for details. The low byte
// contains the indexes for the two endpoints of the edge on which the vertex lies, as numbered
// in Figure 4.16. The high byte contains the vertex reuse data shown in Figure 4.17.

const unsigned short CVoxelMesher::transitionVertexData[512][12] =
{
	{},
	{0x2301, 0x1503, 0x199B, 0x289A},
	{0x2301, 0x2412, 0x4514},
	{0x1503, 0x4514, 0x2412, 0x289A, 0x199B},
	{0x8525, 0x2412, 0x289A, 0x89AC},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
	{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC},
	{0x8525, 0x4514, 0x1503, 0x199B, 0x89AC},
	{0x8525, 0x8658, 0x4445},
	{0x1503, 0x2301, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
	{0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
	{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
	{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
	{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC},
	{0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x89AC},
	{0x8478, 0x8658, 0x89AC, 0x88BC},
	{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
	{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
	{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8478, 0x88BC, 0x89AC},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
	{0x2301, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
	{0x8478, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
	{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
	{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
	{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
	{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2412, 0x4514, 0x1503, 0x199B, 0x289A},
	{0x8478, 0x4445, 0x2412, 0x289A, 0x88BC},
	{0x1503, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
	{0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x289A},
	{0x1503, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x8367, 0x4647},
	{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
	{0x2301, 0x2412, 0x4514, 0x8478, 0x8367, 0x4647},
	{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8367, 0x8478, 0x4647},
	{0x2412, 0x8525, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x8525, 0x4514, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
	{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
	{0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
	{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445, 0x8367, 0x8478, 0x4647},
	{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x2301, 0x4514, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
	{0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
	{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x2301, 0x289A, 0x199B},
	{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x2412, 0x2301, 0x4514},
	{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
	{0x1503, 0x2301, 0x2412, 0x8525, 0x8658, 0x4647, 0x8367, 0x88BC, 0x199B},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x88BC},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
	{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC},
	{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
	{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
	{0x8525, 0x4445, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x4514, 0x2412, 0x289A, 0x199B},
	{0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x88BC},
	{0x8367, 0x4647, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
	{0x2301, 0x4514, 0x4445, 0x4647, 0x8367, 0x88BC, 0x289A},
	{0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x88BC},
	{0x1636, 0x8367, 0x88BC, 0x199B},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
	{0x8367, 0x1636, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
	{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
	{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
	{0x8367, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
	{0x1636, 0x8367, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x1636, 0x8367, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x1636, 0x199B, 0x88BC},
	{0x8367, 0x1636, 0x1503, 0x2301, 0x2412, 0x4445, 0x8658, 0x89AC, 0x88BC},
	{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
	{0x8658, 0x4445, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x8658, 0x8478, 0x8367, 0x1636, 0x1503, 0x4514, 0x2412, 0x289A, 0x89AC},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x199B},
	{0x1503, 0x4514, 0x8525, 0x8658, 0x8478, 0x8367, 0x1636},
	{0x8525, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x289A},
	{0x8525, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC, 0x2412, 0x2301, 0x4514},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x289A},
	{0x1636, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
	{0x2412, 0x4445, 0x8478, 0x8367, 0x1636, 0x1503, 0x2301},
	{0x2301, 0x4514, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x289A},
	{0x8367, 0x1636, 0x1503, 0x4514, 0x4445, 0x8478},
	{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
	{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x289A},
	{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x89AC},
	{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x4647, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
	{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
	{0x8478, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC, 0x8658, 0x8525, 0x4445},
	{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8658, 0x4445, 0x2412, 0x289A, 0x89AC},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x89AC},
	{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x4647, 0x1636, 0x1503, 0x4514, 0x4445, 0x8658, 0x89AC, 0x88BC},
	{0x1636, 0x4647, 0x8658, 0x89AC, 0x199B},
	{0x2301, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
	{0x1636, 0x4647, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
	{0x2412, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
	{0x8658, 0x4647, 0x1636, 0x1503, 0x2301, 0x2412, 0x8525},
	{0x2301, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
	{0x1503, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636},
	{0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x89AC},
	{0x8525, 0x4445, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x89AC},
	{0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x89AC, 0x2412, 0x2301, 0x4514},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x4445, 0x8525, 0x89AC, 0x289A},
	{0x2412, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
	{0x1503, 0x2301, 0x2412, 0x4445, 0x4647, 0x1636},
	{0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
	{0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
	{0x1636, 0x1503, 0x4334},
	{0x2301, 0x4334, 0x1636, 0x199B, 0x289A},
	{0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
	{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
	{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
	{0x1636, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
	{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
	{0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x199B},
	{0x1636, 0x1503, 0x4334, 0x8525, 0x8658, 0x4445},
	{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
	{0x1636, 0x4334, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
	{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x1503, 0x1636, 0x4334},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x89AC},
	{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
	{0x1636, 0x4334, 0x4514, 0x4445, 0x8658, 0x89AC, 0x199B},
	{0x8658, 0x8478, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
	{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
	{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
	{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x88BC},
	{0x2301, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A, 0x1503, 0x1636, 0x4334},
	{0x1636, 0x4334, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
	{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
	{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
	{0x8478, 0x4445, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x1636, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
	{0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x289A, 0x1503, 0x1636, 0x4334},
	{0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
	{0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
	{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
	{0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
	{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
	{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
	{0x1636, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B, 0x8367, 0x8478, 0x4647},
	{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
	{0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x199B, 0x8367, 0x8478, 0x4647},
	{0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
	{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
	{0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
	{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
	{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647, 0x1503, 0x1636, 0x4334},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
	{0x8658, 0x4445, 0x4514, 0x4334, 0x1636, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
	{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8367, 0x4647, 0x8658, 0x89AC, 0x88BC},
	{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334, 0x2412, 0x2301, 0x4514},
	{0x1636, 0x4334, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x88BC},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x4334, 0x1636, 0x199B, 0x88BC},
	{0x8525, 0x4445, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
	{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x4334, 0x1636, 0x199B, 0x289A},
	{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
	{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
	{0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x1636, 0x4334, 0x2301, 0x2412, 0x4445, 0x4647, 0x8367, 0x88BC, 0x199B},
	{0x8367, 0x4647, 0x4445, 0x4514, 0x2301, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x8367, 0x4647, 0x4445, 0x4514, 0x4334, 0x1636, 0x199B, 0x88BC},
	{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
	{0x2301, 0x4334, 0x8367, 0x88BC, 0x289A},
	{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
	{0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x289A},
	{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x8525, 0x89AC, 0x289A},
	{0x8525, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
	{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1503, 0x4334, 0x8367, 0x88BC, 0x199B},
	{0x8367, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
	{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x8658, 0x8525, 0x4445},
	{0x2301, 0x4334, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514, 0x8658, 0x8525, 0x4445},
	{0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
	{0x2301, 0x4514, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
	{0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x89AC},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
	{0x8658, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x2412, 0x4514, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
	{0x2412, 0x8525, 0x8658, 0x8478, 0x8367, 0x4334, 0x1503, 0x199B, 0x289A},
	{0x8367, 0x4334, 0x2301, 0x2412, 0x8525, 0x8658, 0x8478},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x199B},
	{0x8658, 0x8478, 0x8367, 0x4334, 0x4514, 0x8525},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x199B},
	{0x8525, 0x4445, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x8525, 0x4445, 0x8478, 0x8367, 0x4334, 0x4514, 0x2412, 0x289A, 0x89AC},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
	{0x8367, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x4514, 0x2301, 0x289A, 0x199B},
	{0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
	{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x88BC},
	{0x8478, 0x4647, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
	{0x8478, 0x4647, 0x4334, 0x4514, 0x2412, 0x289A, 0x88BC},
	{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
	{0x8478, 0x4647, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x88BC},
	{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x4514, 0x2301, 0x289A, 0x89AC},
	{0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
	{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
	{0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x88BC, 0x8658, 0x8525, 0x4445},
	{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
	{0x2412, 0x4514, 0x4334, 0x4647, 0x8478, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x8478, 0x4647, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x4445, 0x8658, 0x89AC, 0x289A},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x4647, 0x8478, 0x88BC, 0x89AC},
	{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
	{0x8658, 0x4445, 0x4514, 0x4334, 0x4647, 0x8478, 0x88BC, 0x89AC},
	{0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x199B},
	{0x8658, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
	{0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x289A},
	{0x1503, 0x4334, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
	{0x2412, 0x8525, 0x8658, 0x4647, 0x4334, 0x2301},
	{0x2301, 0x4514, 0x8525, 0x8658, 0x4647, 0x4334, 0x1503, 0x199B, 0x289A},
	{0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
	{0x8525, 0x4445, 0x4647, 0x4334, 0x1503, 0x199B, 0x89AC},
	{0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
	{0x1503, 0x4334, 0x4647, 0x4445, 0x8525, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x2412, 0x4514, 0x4334, 0x4647, 0x4445, 0x8525, 0x89AC, 0x289A},
	{0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x199B},
	{0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
	{0x1503, 0x4334, 0x4647, 0x4445, 0x4514, 0x2301, 0x289A, 0x199B},
	{0x4514, 0x4445, 0x4647, 0x4334},
	{0x4514, 0x4445, 0x4647, 0x4334},
	{0x2301, 0x1503, 0x199B, 0x289A, 0x4334, 0x4514, 0x4445, 0x4647},
	{0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
	{0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x199B},
	{0x8525, 0x2412, 0x289A, 0x89AC, 0x4514, 0x4445, 0x4647, 0x4334},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x4514, 0x4445, 0x4647, 0x4334},
	{0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
	{0x8525, 0x4445, 0x4647, 0x4334, 0x1503, 0x199B, 0x89AC},
	{0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
	{0x1503, 0x2301, 0x289A, 0x199B, 0x8525, 0x4514, 0x4334, 0x4647, 0x8658},
	{0x2412, 0x8525, 0x8658, 0x4647, 0x4334, 0x2301},
	{0x1503, 0x4334, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
	{0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x289A},
	{0x8658, 0x4647, 0x4334, 0x4514, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
	{0x8658, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
	{0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x199B},
	{0x8478, 0x8658, 0x89AC, 0x88BC, 0x4445, 0x4647, 0x4334, 0x4514},
	{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC, 0x4334, 0x4514, 0x4445, 0x4647},
	{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
	{0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x199B, 0x8658, 0x8478, 0x88BC, 0x89AC},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x4445, 0x4647, 0x4334, 0x4514},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC, 0x4514, 0x4445, 0x4647, 0x4334},
	{0x2301, 0x4334, 0x4647, 0x4445, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
	{0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x4334, 0x1503, 0x199B, 0x88BC},
	{0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
	{0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
	{0x8478, 0x4647, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x88BC},
	{0x8478, 0x4647, 0x4334, 0x1503, 0x2412, 0x8525, 0x199B, 0x289A, 0x89AC, 0x88BC},
	{0x8478, 0x4647, 0x4334, 0x4514, 0x2412, 0x289A, 0x88BC},
	{0x1503, 0x2301, 0x2412, 0x4514, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x88BC},
	{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
	{0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
	{0x2301, 0x1503, 0x199B, 0x289A, 0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
	{0x8367, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
	{0x2412, 0x8525, 0x89AC, 0x289A, 0x8478, 0x4445, 0x4514, 0x4334, 0x8367},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
	{0x8525, 0x4445, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x199B},
	{0x8658, 0x8478, 0x8367, 0x4334, 0x4514, 0x8525},
	{0x2301, 0x1503, 0x199B, 0x289A, 0x8367, 0x4334, 0x4514, 0x8525, 0x8658, 0x8478},
	{0x8367, 0x4334, 0x2301, 0x2412, 0x8525, 0x8658, 0x8478},
	{0x2412, 0x8525, 0x8658, 0x8478, 0x8367, 0x4334, 0x1503, 0x199B, 0x289A},
	{0x2412, 0x4514, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
	{0x8658, 0x8478, 0x8367, 0x4334, 0x4514, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
	{0x8658, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
	{0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
	{0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x89AC},
	{0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x2301, 0x289A, 0x199B},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
	{0x8658, 0x4445, 0x2412, 0x1503, 0x4334, 0x8367, 0x289A, 0x199B, 0x88BC, 0x89AC},
	{0x8367, 0x4334, 0x4514, 0x4445, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
	{0x1503, 0x2301, 0x2412, 0x8525, 0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x199B},
	{0x2301, 0x4334, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x8658, 0x8525, 0x4445},
	{0x8367, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
	{0x8367, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
	{0x8525, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
	{0x1503, 0x4334, 0x8367, 0x8525, 0x2412, 0x88BC, 0x89AC, 0x289A, 0x199B},
	{0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x289A},
	{0x1503, 0x2301, 0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x199B},
	{0x2301, 0x4334, 0x8367, 0x88BC, 0x289A},
	{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
	{0x1636, 0x8367, 0x88BC, 0x199B, 0x4647, 0x4334, 0x4514, 0x4445},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x4334, 0x4514, 0x4445, 0x4647},
	{0x8367, 0x1636, 0x199B, 0x88BC, 0x2301, 0x4334, 0x4647, 0x4445, 0x2412},
	{0x2412, 0x4445, 0x4647, 0x4334, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
	{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B, 0x4514, 0x4445, 0x4647, 0x4334},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC, 0x4334, 0x4514, 0x4445, 0x4647},
	{0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
	{0x8367, 0x1636, 0x1503, 0x4334, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC},
	{0x1636, 0x8367, 0x88BC, 0x199B, 0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
	{0x1636, 0x8367, 0x88BC, 0x199B, 0x8658, 0x4647, 0x4334, 0x2301, 0x2412, 0x8525},
	{0x2412, 0x8525, 0x8658, 0x4647, 0x4334, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
	{0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x289A, 0x8367, 0x1636, 0x199B, 0x88BC},
	{0x8367, 0x1636, 0x1503, 0x2301, 0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x88BC},
	{0x8658, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
	{0x8367, 0x1636, 0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x88BC},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x4647, 0x4334, 0x4514, 0x4445},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A, 0x4647, 0x4334, 0x4514, 0x4445},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
	{0x8658, 0x8478, 0x8367, 0x1636, 0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x89AC},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B, 0x4445, 0x4647, 0x4334, 0x4514},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x4334, 0x4514, 0x4445, 0x4647},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x199B},
	{0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x4334},
	{0x8525, 0x4514, 0x4334, 0x4647, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x289A},
	{0x8525, 0x2412, 0x2301, 0x4334, 0x4647, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
	{0x2412, 0x8525, 0x89AC, 0x289A, 0x1503, 0x1636, 0x8367, 0x8478, 0x4647, 0x4334},
	{0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x4514, 0x2412, 0x289A, 0x199B},
	{0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x4514},
	{0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x199B},
	{0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x1503},
	{0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x4445, 0x4514, 0x4334, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
	{0x1636, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x4445, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x89AC},
	{0x1636, 0x4334, 0x2301, 0x8525, 0x4445, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
	{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x1636, 0x4334, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x8658, 0x8525, 0x4514, 0x4334, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x88BC},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
	{0x1636, 0x4334, 0x4514, 0x2412, 0x8658, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
	{0x8658, 0x8478, 0x88BC, 0x89AC, 0x2412, 0x2301, 0x1503, 0x1636, 0x4334, 0x4514},
	{0x1636, 0x4334, 0x2301, 0x8658, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
	{0x8658, 0x8478, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
	{0x1636, 0x4334, 0x4514, 0x4445, 0x8658, 0x89AC, 0x199B},
	{0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x4445, 0x8658, 0x89AC, 0x289A},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x89AC},
	{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x1503, 0x1636, 0x4334},
	{0x2412, 0x8525, 0x8658, 0x4445, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
	{0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x4445},
	{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x1636, 0x1503, 0x4334, 0x8525, 0x8658, 0x4445},
	{0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x199B},
	{0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x289A},
	{0x1636, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
	{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
	{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
	{0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x2412},
	{0x2301, 0x4334, 0x1636, 0x199B, 0x289A},
	{0x1636, 0x1503, 0x4334},
	{0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
	{0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
	{0x1503, 0x2301, 0x2412, 0x4445, 0x4647, 0x1636},
	{0x2412, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
	{0x8525, 0x2412, 0x289A, 0x89AC, 0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
	{0x1636, 0x4647, 0x4445, 0x4514, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
	{0x8525, 0x4445, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x89AC},
	{0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x89AC},
	{0x1503, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636},
	{0x2301, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
	{0x8658, 0x4647, 0x1636, 0x1503, 0x2301, 0x2412, 0x8525},
	{0x2412, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
	{0x1636, 0x4647, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x2301, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
	{0x1636, 0x4647, 0x8658, 0x89AC, 0x199B},
	{0x8658, 0x8478, 0x88BC, 0x89AC, 0x1636, 0x4647, 0x4445, 0x4514, 0x1503},
	{0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
	{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2412, 0x4445, 0x4647, 0x1636, 0x1503, 0x2301},
	{0x2412, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x88BC},
	{0x2301, 0x1503, 0x1636, 0x4647, 0x4445, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
	{0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x88BC},
	{0x8478, 0x4647, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
	{0x2301, 0x4514, 0x8525, 0x8478, 0x4647, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x89AC},
	{0x8478, 0x4647, 0x1636, 0x2412, 0x8525, 0x199B, 0x289A, 0x89AC, 0x88BC},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x289A},
	{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x8478, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
	{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
	{0x8367, 0x1636, 0x1503, 0x4514, 0x4445, 0x8478},
	{0x2301, 0x4514, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x289A},
	{0x2412, 0x4445, 0x8478, 0x8367, 0x1636, 0x1503, 0x2301},
	{0x1636, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
	{0x8525, 0x2412, 0x289A, 0x89AC, 0x1503, 0x4514, 0x4445, 0x8478, 0x8367, 0x1636},
	{0x1636, 0x8367, 0x8478, 0x4445, 0x4514, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x289A},
	{0x8525, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
	{0x1503, 0x4514, 0x8525, 0x8658, 0x8478, 0x8367, 0x1636},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x199B},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
	{0x8658, 0x8478, 0x8367, 0x1636, 0x1503, 0x4514, 0x2412, 0x289A, 0x89AC},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
	{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
	{0x8658, 0x4445, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
	{0x2301, 0x4514, 0x4445, 0x8658, 0x8367, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
	{0x8367, 0x1636, 0x1503, 0x2301, 0x2412, 0x4445, 0x8658, 0x89AC, 0x88BC},
	{0x8658, 0x4445, 0x2412, 0x1636, 0x8367, 0x289A, 0x199B, 0x88BC, 0x89AC},
	{0x8367, 0x1636, 0x1503, 0x4514, 0x4445, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
	{0x8367, 0x1636, 0x199B, 0x88BC, 0x8658, 0x8525, 0x2412, 0x2301, 0x4514, 0x4445},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
	{0x1636, 0x8367, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
	{0x8367, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
	{0x2301, 0x4514, 0x8525, 0x8367, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
	{0x2412, 0x8525, 0x8367, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
	{0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
	{0x8367, 0x1636, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
	{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
	{0x1636, 0x8367, 0x88BC, 0x199B},
	{0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x88BC},
	{0x2301, 0x4514, 0x4445, 0x4647, 0x8367, 0x88BC, 0x289A},
	{0x8367, 0x4647, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
	{0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x88BC},
	{0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x88BC, 0x2412, 0x8525, 0x89AC, 0x289A},
	{0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x4647, 0x8367, 0x88BC, 0x89AC},
	{0x8525, 0x4445, 0x4647, 0x8367, 0x1503, 0x2301, 0x88BC, 0x199B, 0x289A, 0x89AC},
	{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x88BC},
	{0x1503, 0x2301, 0x2412, 0x8525, 0x8658, 0x4647, 0x8367, 0x88BC, 0x199B},
	{0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
	{0x2412, 0x4514, 0x1503, 0x8367, 0x4647, 0x8658, 0x199B, 0x88BC, 0x89AC, 0x289A},
	{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x2412, 0x2301, 0x4514},
	{0x8367, 0x4647, 0x8658, 0x2301, 0x1503, 0x89AC, 0x289A, 0x199B, 0x88BC},
	{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
	{0x1503, 0x4514, 0x4445, 0x4647, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
	{0x8658, 0x8478, 0x8367, 0x4647, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC},
	{0x1503, 0x2301, 0x2412, 0x4445, 0x4647, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
	{0x8658, 0x8478, 0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x89AC},
	{0x2412, 0x8525, 0x8658, 0x8478, 0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x289A},
	{0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x4647},
	{0x1503, 0x2301, 0x289A, 0x199B, 0x8367, 0x8478, 0x8658, 0x8525, 0x4445, 0x4647},
	{0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x8367},
	{0x8525, 0x4514, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
	{0x2412, 0x8525, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
	{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8367, 0x8478, 0x4647},
	{0x2301, 0x2412, 0x4514, 0x8478, 0x8367, 0x4647},
	{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
	{0x8478, 0x8367, 0x4647},
	{0x1503, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
	{0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x289A},
	{0x1503, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
	{0x8478, 0x4445, 0x2412, 0x289A, 0x88BC},
	{0x1503, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
	{0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x89AC},
	{0x8525, 0x4445, 0x8478, 0x1503, 0x2301, 0x88BC, 0x199B, 0x289A, 0x89AC},
	{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
	{0x8478, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
	{0x2301, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
	{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
	{0x2412, 0x4514, 0x1503, 0x8478, 0x8658, 0x199B, 0x88BC, 0x89AC, 0x289A},
	{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
	{0x1503, 0x2301, 0x8658, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
	{0x8478, 0x8658, 0x89AC, 0x88BC},
	{0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x89AC},
	{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC},
	{0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
	{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A},
	{0x2412, 0x8525, 0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x289A},
	{0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x8658},
	{0x1503, 0x2301, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
	{0x8525, 0x8658, 0x4445},
	{0x8525, 0x4514, 0x1503, 0x199B, 0x89AC},
	{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC},
	{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
	{0x8525, 0x2412, 0x289A, 0x89AC},
	{0x1503, 0x4514, 0x2412, 0x289A, 0x199B},
	{0x2301, 0x2412, 0x4514},
	{0x2301, 0x1503, 0x199B, 0x289A},
	{}
};


#ifndef _C_SKINNED_MODEL_
#define _C_SKINNED_MODEL_

// Include model and skinned mesh types
#include "CModel.h"
#include "core-ext/animation/Skeleton.h"

// Include vector
#include <vector>
#include <map>

class rrSkinnedMesh;
class skeletonBone_t;
class CMorpher;

class CSkinnedModel : public CModel
{
public:
	// Constructor
	RENDER_API explicit CSkinnedModel ( const string& sFilename );
	// Destructor
	RENDER_API ~CSkinnedModel ( );

private:
	// Load the model
	void LoadSkinnedModel ( const string& sFilename );

	//void DebugRenderSkeleton ( skeletonBone_t* );
	void DebugRenderSkeleton ( void );

public:
	// == RENDERABLE OBJECT INTERFACE ==

	void PreStep ( void ) override;
	void PreStepSynchronus ( void ) override;
	void PostStepSynchronus ( void ) override;
	void PostStep ( void ) override;

	// == MODDERS ==
	//	EnsureUpdateSkeleton ( ) : checks if skeleton in storage has been updated, and updates if it hasn't.
	// Will normally not do anything.
	RENDER_API void EnsureUpdateSkeleton ( void );

	// == GETTERS ==
	// Get the morpher
	RENDER_API CMorpher*	GetMorpher ( void );
	//	GetSkeleton ( ) : Return the skeleton internally used
	// Pass this pointer into CAnimation instances to add a sampling target.
	RENDER_API animation::Skeleton*	GetSkeleton ( void );

	// == SETTERS ==
	// This sets the bones to copy the target skinned model's bones completely.
	//  It does this referencing by creating a reference list that is generated by name matching.
	// If the referenced model is deleted, unexpected behavior will occur.
	RENDER_API void SetReferencedSkeletonBuffer ( CSkinnedModel* );

protected:
	// Render Options
	bool bUseBoneVertexBlending;
	bool bDrawSkeleton;

	// Skeleton Info
	animation::Skeleton			skeleton;

	//bool						bReferenceSkeleton;
	//bool						bPerfectReference; // Is the matching perfect? If not, we have to update the imperfects
	//CSkinnedModel*				pReferencedSkeleton;
	//std::map<skeletonBone_t*,skeletonBone_t*>	mBoneReferenceMap;
	//std::vector<skeletonBone_t*>	mBoneMismatchList;
	CSkinnedModel*				referenceToCopySkeletonFrom;

	skinningData_t				skinning_data;
	bool						skinning_pushed;

	// Morpher Info
	bool		bDoMorphing;
	int			iMorphTarget;
	CMorpher*	pMorpher;
	rrSkinnedMesh*	m_glStreamedMesh;

	// Softness movement tracking
	Matrix4x4	matrixPreviousStep;
	Matrix4x4	matrixPreviousStepDiff;
	Matrix4x4	matrixSavePoints [6];

	// Update jiggle bones
	//void UpdateJigglebones ( void );

	void SkinningBuffersInit ( void );
	void SkinningBuffersFree ( void );
	void SkinningBuffersPush ( void );

};

#endif